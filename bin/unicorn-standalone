#!/usr/bin/env ruby

require "fileutils"
require "tempfile"
require "thread"
require "unicorn/launcher"

queue = Queue.new
tmpdir = Dir.mktmpdir("unicorn-standalone")

# TODO: read from -p PORT

File.open("#{tmpdir}/nginx.conf", "w") do |f| 
  f.write <<-EOF
daemon off;
worker_processes 4;

events {
  accept_mutex on;
  worker_connections 1024;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_heroku_request_id';
  access_log #{tmpdir}/nginx-access.log l2met;
  error_log  #{tmpdir}/nginx-error.log;

  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  upstream app_server {
    server unix:#{tmpdir}/nginx.socket fail_timeout=0;
  }

  server {
    listen #{ENV["PORT"] || 3000};
    server_name _;
    keepalive_timeout 5;

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }
}
EOF
end

begin
  # Start nginx subprocess; wait for exit and exit main process (and unicorn thread)
  BASE = File.expand_path(File.join(File.dirname(__FILE__), "..", "/ext/nginx/vendor/nginx/"))
  pid = Process.spawn(File.join(BASE, "sbin", "nginx"), "-c", "#{tmpdir}/nginx.conf")
  Thread.new {
    Process.wait pid
    exit(1) if queue.empty?
  }

  # Start unicorn thread; wait for exit and kill nginx process
  options = Unicorn::Configurator::RACKUP[:options]
  options[:listeners] = "#{tmpdir}/nginx.socket"
  app     = Unicorn.builder(ARGV[0] || "config.ru", nil)
  thread  = Unicorn::HttpServer.new(app, options).start
  thread.join
  queue << true
  Process.kill(pid)
ensure
  FileUtils.rm_rf(tmpdir)
end